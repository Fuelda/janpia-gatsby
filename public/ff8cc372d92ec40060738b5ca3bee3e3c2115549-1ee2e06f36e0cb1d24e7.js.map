{"version":3,"file":"ff8cc372d92ec40060738b5ca3bee3e3c2115549-1ee2e06f36e0cb1d24e7.js","mappings":"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","sources":["webpack://janpia-disclosure/./src/components/atoms/ResetSearchButton.tsx","webpack://janpia-disclosure/./src/features/search/component/main/Business/BusinessCategory.tsx","webpack://janpia-disclosure/./src/features/search/component/main/Business/BusinessOrgType.tsx","webpack://janpia-disclosure/./src/features/search/component/main/Business/BusinessStatus.tsx","webpack://janpia-disclosure/./src/features/search/component/main/Business/BusinessTypeName.tsx","webpack://janpia-disclosure/./src/features/search/component/main/Business/SubsidyAmount.tsx","webpack://janpia-disclosure/./src/features/search/component/main/Organization/PrefecturesSp.tsx"],"sourcesContent":["import { faCircleXmark } from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport \"twin.macro\";\nimport { useSearchContext } from \"../../context/searchContext\";\nimport { useAlgoliaStrapiContext } from \"../../context/algoliaStrapiContext\";\n\nconst ResetSearchButton = () => {\n  const { resetSearchStatus } = useSearchContext();\n\n  return (\n    <button tw=\"text-sm text-gray-border\" onClick={() => resetSearchStatus()}>\n      <FontAwesomeIcon icon={faCircleXmark} tw=\"mr-1\" />\n      検索条件をリセット\n    </button>\n  );\n};\n\nexport default ResetSearchButton;\n","import * as Checkbox from \"@radix-ui/react-checkbox\";\nimport { CheckIcon } from \"@radix-ui/react-icons\";\nimport React from \"react\";\nimport { useSearchContext } from \"../../../../../context/searchContext\";\nimport { businessCategoryArray } from \"../../../store/filterContents\";\nimport { checkBox, checkBoxList, checkMark } from \"../../../../../styles/form\";\nimport \"twin.macro\";\nimport { h3, hCenter } from \"../../../../../styles/base\";\nimport tw from \"twin.macro\";\n\nconst businessCategoryLabel = [\n  { label: \"草の根活動支援事業\", code: 1, subCode: 0 },\n  {\n    label: \"ソーシャルビジネス支援事業\",\n    code: 2,\n    subCode: -1,\n  },\n  { label: \"イノベーション企画支援事業\", code: 3, subCode: -2 },\n  { label: \"災害支援事業\", code: 4, subCode: -3 },\n];\n\nconst BusinessCategory = (props: { path: string }) => {\n  const { searchState, searchSetState } = useSearchContext();\n  const { business_category } = searchState;\n  const { setBusinessCategory } = searchSetState;\n\n  const checkboxArray = businessCategoryArray;\n\n  const handleCheckbox = (code: number, subCode: number) => {\n    if (\n      business_category.some((bc) => bc.code === code && bc.subCode === subCode)\n    ) {\n      setBusinessCategory(\n        business_category.filter(\n          (bc) => bc.code !== code || bc.subCode !== subCode\n        )\n      );\n    } else {\n      setBusinessCategory([\n        ...business_category,\n        { code: code, subCode: subCode },\n      ]);\n    }\n  };\n\n  return (\n    <div>\n      <h3 css={h3}>事業分類</h3>\n      <div\n        tw=\"flex gap-y-2.5 flex-wrap px-3.5 py-2.5\"\n        css={props.path.includes(\"search\") ? tw`gap-x-14` : tw`gap-x-3`}\n      >\n        {businessCategoryLabel.map((checkbox) => (\n          <div key={checkbox.label} css={hCenter} tw=\"w-[252px] gap-2\">\n            <Checkbox.Root\n              id={checkbox.label}\n              onCheckedChange={() =>\n                handleCheckbox(checkbox.code, checkbox.subCode)\n              }\n              css={checkBox}\n              checked={business_category.some(\n                (bc) => bc.subCode === checkbox.subCode\n              )}\n            >\n              <Checkbox.Indicator tw=\"flex justify-center\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"15.003\"\n                  height=\"11.252\"\n                  viewBox=\"0 0 15.003 11.252\"\n                  css={checkMark}\n                >\n                  <path\n                    id=\"check\"\n                    d=\"M300.625,135.16l-1.876-1.876h0L295,129.533l1.875-1.875,3.751,3.751,7.5-7.5L310,125.783Z\"\n                    transform=\"translate(-294.999 -123.908)\"\n                  />\n                </svg>\n              </Checkbox.Indicator>\n            </Checkbox.Root>\n            <label htmlFor={checkbox.label}>{checkbox.label}</label>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default BusinessCategory;\n","import * as Checkbox from \"@radix-ui/react-checkbox\";\nimport { CheckIcon } from \"@radix-ui/react-icons\";\nimport React from \"react\";\nimport { useSearchContext } from \"../../../../../context/searchContext\";\nimport { OrganizationTypeCdArray } from \"../../../store/filterContents\";\nimport \"twin.macro\";\nimport {\n  checkBox,\n  checkBoxList,\n  checkBoxSet,\n  checkMark,\n} from \"../../../../../styles/form\";\nimport { h3, hCenter } from \"../../../../../styles/base\";\nimport tw from \"twin.macro\";\n\nconst BusinessOrgType = (props: { path: string }) => {\n  const { searchState, searchSetState } = useSearchContext();\n  const { business_org_type } = searchState;\n  const { setBusinessOrgType } = searchSetState;\n  const checkboxArray = OrganizationTypeCdArray;\n\n  const handleCheckbox = (code: string) => {\n    if (business_org_type.includes(code)) {\n      setBusinessOrgType(business_org_type.filter((bot) => bot !== code));\n    } else {\n      setBusinessOrgType([...business_org_type, code]);\n    }\n  };\n\n  return (\n    <div>\n      <h3 css={h3}>団体種別</h3>\n      <div\n        tw=\"flex gap-y-2.5 flex-wrap px-3.5 py-2.5\"\n        css={props.path.includes(\"search\") ? tw`gap-x-14` : tw`gap-x-3`}\n      >\n        {checkboxArray.map((checkbox) => (\n          <div key={checkbox.code} css={[hCenter, checkBoxSet]}>\n            <Checkbox.Root\n              id={checkbox.label}\n              onCheckedChange={() => handleCheckbox(checkbox.code)}\n              css={checkBox}\n              checked={business_org_type.includes(checkbox.code)}\n            >\n              <Checkbox.Indicator tw=\"flex justify-center\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"15.003\"\n                  height=\"11.252\"\n                  viewBox=\"0 0 15.003 11.252\"\n                  css={checkMark}\n                >\n                  <path\n                    id=\"check\"\n                    d=\"M300.625,135.16l-1.876-1.876h0L295,129.533l1.875-1.875,3.751,3.751,7.5-7.5L310,125.783Z\"\n                    transform=\"translate(-294.999 -123.908)\"\n                  />\n                </svg>\n              </Checkbox.Indicator>\n            </Checkbox.Root>\n            <label htmlFor={checkbox.label}>{checkbox.label}</label>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default BusinessOrgType;\n","import * as Checkbox from \"@radix-ui/react-checkbox\";\nimport { CheckIcon } from \"@radix-ui/react-icons\";\nimport * as RadioGroup from \"@radix-ui/react-radio-group\";\nimport React from \"react\";\nimport { useSearchContext } from \"../../../../../context/searchContext\";\nimport { businessStatusArray } from \"../../../store/filterContents\";\nimport \"twin.macro\";\nimport { h3, hCenter } from \"../../../../../styles/base\";\nimport {\n  checkBox,\n  checkBoxList,\n  checkBoxSet,\n  checkMark,\n} from \"../../../../../styles/form\";\nimport tw from \"twin.macro\";\n\nconst BusinessStatus = (props: { path: string }) => {\n  const { searchState, searchSetState } = useSearchContext();\n  const { business_status } = searchState;\n  const { setBusinessStatus } = searchSetState;\n  const checkboxArray = businessStatusArray;\n\n  const handleCheckbox = (code: number) => {\n    business_status !== code\n      ? setBusinessStatus(code)\n      : setBusinessStatus(null);\n  };\n\n  return (\n    <div>\n      <h3 css={h3}>事業ステータス</h3>\n      <div\n        tw=\"flex gap-y-2.5 flex-wrap px-3.5 py-2.5\"\n        css={props.path.includes(\"search\") ? tw`gap-x-14` : tw`gap-x-3`}\n      >\n        {checkboxArray.map((checkbox) => (\n          <div key={checkbox.code} css={[hCenter, checkBoxSet]}>\n            <Checkbox.Root\n              id={checkbox.label}\n              onCheckedChange={() => handleCheckbox(checkbox.code)}\n              css={checkBox}\n              checked={business_status === checkbox.code}\n            >\n              <Checkbox.Indicator tw=\"flex justify-center\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"15.003\"\n                  height=\"11.252\"\n                  viewBox=\"0 0 15.003 11.252\"\n                  css={checkMark}\n                >\n                  <path\n                    id=\"check\"\n                    d=\"M300.625,135.16l-1.876-1.876h0L295,129.533l1.875-1.875,3.751,3.751,7.5-7.5L310,125.783Z\"\n                    transform=\"translate(-294.999 -123.908)\"\n                  />\n                </svg>\n              </Checkbox.Indicator>\n            </Checkbox.Root>\n            <label htmlFor={checkbox.label}>{checkbox.label}</label>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default BusinessStatus;\n","import * as Checkbox from \"@radix-ui/react-checkbox\";\nimport React from \"react\";\nimport { useSearchContext } from \"../../../../../context/searchContext\";\nimport { useStrapiContext } from \"../../../../../context/strapiContext\";\nimport { h3, hCenter } from \"../../../../../styles/base\";\nimport { checkBox, checkBoxSet, checkMark } from \"../../../../../styles/form\";\nimport \"twin.macro\";\nimport tw from \"twin.macro\";\n\nconst BusinessTypeName = (props: { path: string }) => {\n  const { searchState, searchSetState } = useSearchContext();\n  const { allStrapiBizPlan, allStrapiBizPlanManual } = useStrapiContext();\n  const { btnYear, btnCategory } = searchState;\n  const { setBtnYear, setBtnCategory } = searchSetState;\n\n  const businessTypeNameYear = allStrapiBizPlan.edges.map(\n    (item) => item.node.business_type_name || \"\"\n  );\n  const businessTypeNameYearManual = allStrapiBizPlanManual.edges.map(\n    (item) => item.node.business_type_name?.label || \"\"\n  );\n  const businessTypeNameYearSum = [\n    ...businessTypeNameYear,\n    ...businessTypeNameYearManual,\n  ];\n  const uniqueBusinessTypeNameYear = [...new Set(businessTypeNameYearSum)];\n  const regexPattern = /\\d{4}年度/g;\n  const yearBusinessTypeNameYear = uniqueBusinessTypeNameYear.map((item) => {\n    const matches = item?.match(regexPattern);\n    return matches ? matches[0] : item;\n  });\n  const uniqueYearBusinessTypeNameYear = [\n    ...new Set(yearBusinessTypeNameYear),\n  ].sort((a, b) => {\n    return b.localeCompare(a);\n  });\n\n  const businessTypeNameCategory = [\"通常枠\", \"コロナ枠\"];\n\n  const handleYearCheckbox = (label: string) => {\n    if (btnYear.includes(label)) {\n      setBtnYear(btnYear.filter((btny) => btny !== label));\n    } else {\n      setBtnYear([...btnYear, label]);\n    }\n  };\n  const handleCategoryCheckbox = (label: string) => {\n    if (btnCategory.includes(label)) {\n      setBtnCategory(btnCategory.filter((btny) => btny !== label));\n    } else {\n      setBtnCategory([...btnCategory, label]);\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <h3 css={h3}>採択事業年度</h3>\n        <div\n          tw=\"flex gap-y-2.5 flex-wrap px-3.5 py-2.5\"\n          css={props.path.includes(\"search\") ? tw`gap-x-14` : tw`gap-x-3`}\n        >\n          {uniqueYearBusinessTypeNameYear.map((checkbox) => (\n            <div key={checkbox} css={[hCenter, checkBoxSet]} tw=\"gap-2\">\n              <Checkbox.Root\n                id={checkbox}\n                onClick={() => handleYearCheckbox(checkbox)}\n                css={checkBox}\n                checked={btnYear.includes(checkbox)}\n              >\n                <Checkbox.Indicator tw=\"flex justify-center\">\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"15.003\"\n                    height=\"11.252\"\n                    viewBox=\"0 0 15.003 11.252\"\n                    css={checkMark}\n                  >\n                    <path\n                      id=\"check\"\n                      d=\"M300.625,135.16l-1.876-1.876h0L295,129.533l1.875-1.875,3.751,3.751,7.5-7.5L310,125.783Z\"\n                      transform=\"translate(-294.999 -123.908)\"\n                    />\n                  </svg>\n                </Checkbox.Indicator>\n              </Checkbox.Root>\n              <label htmlFor={checkbox}>{checkbox}</label>\n            </div>\n          ))}\n        </div>\n      </div>\n      <div>\n        <h3 css={h3}>事業枠</h3>\n        <div\n          tw=\"flex gap-y-2.5 flex-wrap px-3.5 py-2.5\"\n          css={props.path.includes(\"search\") ? tw`gap-x-14` : tw`gap-x-3`}\n        >\n          {businessTypeNameCategory.map((checkbox) => (\n            <div key={checkbox} css={[hCenter, checkBoxSet]} tw=\"gap-2\">\n              <Checkbox.Root\n                id={checkbox}\n                onClick={() => handleCategoryCheckbox(checkbox)}\n                css={checkBox}\n                checked={btnCategory.includes(checkbox)}\n              >\n                <Checkbox.Indicator tw=\"flex justify-center\">\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"15.003\"\n                    height=\"11.252\"\n                    viewBox=\"0 0 15.003 11.252\"\n                    css={checkMark}\n                  >\n                    <path\n                      id=\"check\"\n                      d=\"M300.625,135.16l-1.876-1.876h0L295,129.533l1.875-1.875,3.751,3.751,7.5-7.5L310,125.783Z\"\n                      transform=\"translate(-294.999 -123.908)\"\n                    />\n                  </svg>\n                </Checkbox.Indicator>\n              </Checkbox.Root>\n              <label htmlFor={checkbox}>\n                {(checkbox === \"通常枠\" && \"通常枠\") ||\n                  (checkbox === \"コロナ枠\" && \"緊急支援枠\")}\n              </label>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BusinessTypeName;\n","import React from \"react\";\nimport * as Checkbox from \"@radix-ui/react-checkbox\";\nimport { CheckIcon } from \"@radix-ui/react-icons\";\nimport { useSearchContext } from \"../../../../../context/searchContext\";\nimport { subsidyAmountArray } from \"../../../store/filterContents\";\nimport {\n  checkBox,\n  checkBoxList,\n  checkBoxSet,\n  checkMark,\n} from \"../../../../../styles/form\";\nimport \"twin.macro\";\nimport { h3, hCenter } from \"../../../../../styles/base\";\nimport tw from \"twin.macro\";\n\nconst SubsidyAmount = (props: { path: string }) => {\n  const { searchState, searchSetState } = useSearchContext();\n  const { subsidy_amount } = searchState;\n  const { setSubsidyAmount } = searchSetState;\n\n  const checkboxArray = subsidyAmountArray;\n\n  const handleCheckbox = (min: number, max: number) => {\n    if (subsidy_amount.some((sa) => sa.min === min)) {\n      setSubsidyAmount(subsidy_amount.filter((sa) => sa.min !== min));\n    } else {\n      setSubsidyAmount([...subsidy_amount, { min: min, max: max }]);\n    }\n  };\n\n  return (\n    <div>\n      <h3 css={h3}>助成額</h3>\n      <div\n        tw=\"flex gap-y-2.5 flex-wrap px-3.5 py-2.5\"\n        css={props.path.includes(\"search\") ? tw`gap-x-14` : tw`gap-x-3`}\n      >\n        {checkboxArray.map((checkbox) => (\n          <div key={checkbox.label} css={[hCenter, checkBoxSet]}>\n            <Checkbox.Root\n              id={checkbox.label}\n              onCheckedChange={() => handleCheckbox(checkbox.min, checkbox.max)}\n              css={checkBox}\n              checked={subsidy_amount.some((sa) => sa.min === checkbox.min)}\n            >\n              <Checkbox.Indicator tw=\"flex justify-center\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"15.003\"\n                  height=\"11.252\"\n                  viewBox=\"0 0 15.003 11.252\"\n                  css={checkMark}\n                >\n                  <path\n                    id=\"check\"\n                    d=\"M300.625,135.16l-1.876-1.876h0L295,129.533l1.875-1.875,3.751,3.751,7.5-7.5L310,125.783Z\"\n                    transform=\"translate(-294.999 -123.908)\"\n                  />\n                </svg>\n              </Checkbox.Indicator>\n            </Checkbox.Root>\n            <label htmlFor={checkbox.label}>{checkbox.label}</label>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default SubsidyAmount;\n","import React from \"react\";\nimport \"twin.macro\";\nimport { h3, vCenter } from \"../../../../../styles/base\";\nimport { StaticImage } from \"gatsby-plugin-image\";\nimport { useModalContext } from \"../../../../../context/modalContext\";\nimport { useSearchContext } from \"../../../../../context/searchContext\";\n\nconst PrefecturesSp = (props: { category: string }) => {\n  const { setIsModalOpen } = useModalContext();\n  const { searchState } = useSearchContext();\n  const { prefectures, target_area } = searchState;\n  const prefecturesText =\n    props.category === \"prefectures\"\n      ? prefectures.join(\" / \")\n      : target_area.join(\" / \");\n\n  return (\n    <div tw=\"hidden lg:block\">\n      <h3 css={h3}>\n        {props.category === \"prefectures\" ? \"団体所在地\" : \"事業対象地域\"}\n      </h3>\n      <div tw=\"px-3.5 py-2.5\">\n        <p>選択した地域：{prefecturesText}</p>\n        <button\n          css={vCenter}\n          tw=\"mt-3 border border-blue-button rounded py-2.5 w-full\"\n          onClick={() => {\n            props.category === \"prefectures\"\n              ? setIsModalOpen(\"prefecturesSp\")\n              : setIsModalOpen(\"targetAreaSp\");\n          }}\n        >\n          <div tw=\"flex gap-2.5\">\n            <StaticImage\n              src=\"../../../../../images/map-icon.svg\"\n              alt=\"マップアイコン\"\n              tw=\"w-[21.65px]\"\n            />\n            <p tw=\"text-blue-button font-bold\">\n              {props.category === \"prefectures\" ? \"団体所在地\" : \"活動地域\"}\n              を選択する\n            </p>\n          </div>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default PrefecturesSp;\n"],"names":["resetSearchStatus","useSearchContext","___EmotionJSX","onClick","FontAwesomeIcon","icon","faCircleXmark","businessCategoryLabel","label","code","subCode","props","searchState","searchSetState","business_category","setBusinessCategory","businessCategoryArray","path","includes","map","checkbox","key","id","onCheckedChange","handleCheckbox","some","bc","filter","checked","Checkbox","xmlns","width","height","viewBox","d","transform","htmlFor","h3","hCenter","checkBox","checkMark","business_org_type","setBusinessOrgType","checkboxArray","OrganizationTypeCdArray","checkBoxSet","bot","business_status","setBusinessStatus","businessStatusArray","allStrapiBizPlan","allStrapiBizPlanManual","useStrapiContext","btnYear","btnCategory","setBtnYear","setBtnCategory","businessTypeNameYear","edges","item","node","business_type_name","businessTypeNameYearManual","_item$node$business_t","businessTypeNameYearSum","uniqueBusinessTypeNameYear","Set","regexPattern","yearBusinessTypeNameYear","matches","match","uniqueYearBusinessTypeNameYear","_toConsumableArray","sort","a","b","localeCompare","handleYearCheckbox","btny","handleCategoryCheckbox","subsidy_amount","setSubsidyAmount","subsidyAmountArray","min","max","sa","setIsModalOpen","useModalContext","prefectures","target_area","prefecturesText","category","join","StaticImage","src","alt","vCenter"],"sourceRoot":""}